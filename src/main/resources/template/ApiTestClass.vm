import ${packageName}.BaseTest;
#if($requestClassName)
import ${requestClassName};
#end
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
#if($method != "get")
import org.springframework.http.MediaType;
#end
#if($isAdmin)
import ${packageName}.mock.MockAdmin;
#else
import ${packageName}.mock.MockApiUser;
#end
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultHandlers;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.transaction.annotation.Transactional;

@RunWith(SpringRunner.class)
@WebAppConfiguration
@SpringBootTest
@Transactional
#if($isAdmin)
@MockAdmin
@Sql({"/sql/user/user_base.sql"})
#else
@MockApiUser("user1")
@Sql({"/sql/user/user_base.sql"})
#end
public class ${className} extends BaseTest {

    @Test
    public void successTest() throws Exception {
#if($requestClassSimpleName)
        ${requestClassSimpleName} request = new ${requestClassSimpleName}();
#foreach($setter in $requestSetters)
        request.$setter();
#end

#end
        String response = mMockMvc.perform(
                MockMvcRequestBuilders.${method}(BASE_HOST + "${url}"#foreach($pathVar in $pathVars), $pathVar#end)#if($requestClassSimpleName)

                        .contentType(MediaType.APPLICATION_JSON)
                        .content(mObjectMapper.writeValueAsString(#if($requestClassSimpleName)request#end)))#end#if($params.size() == 0 || $method != 'get' && !$requestClassSimpleName))#end

#if($method == "get")
#foreach($param in $params)
                    .param("${param}", "")#if($velocityCount==$params.size()))#end

#end
#end
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andDo(MockMvcResultHandlers.print())
                .andReturn()
                .getResponse()
                .getContentAsString();
#if($hasReturn)

        prettyPrintJson(response);
#end

        assertResponseSuccess(response);
    }
}
