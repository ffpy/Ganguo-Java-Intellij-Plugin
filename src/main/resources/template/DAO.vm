import ${packageName}.domain.repository.${moduleName}.I${Name}DbStrategy;
import com.ganguomob.dev.base.infrastructure.repository.db.BaseDAO;
import ${packageName}.jooq.tables.pojos.${pojoCls};
import ${packageName}.jooq.tables.records.${recordCls};
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

import static ${packageName}.jooq.Tables.${table};

@Repository
public class ${Name}DAO extends BaseDAO implements I${Name}DbStrategy {

    @Override
    public Optional<${pojoCls}> findById(Long id) {
        return mDSLContext.selectFrom(${table})
                .where(${table}.ID.eq(id))
#if($hasActive)
                .and(${table}.ACTIVE.isTrue())
#end
                .fetchOptionalInto(${pojoCls}.class);
    }

    @Override
    public List<${pojoCls}> listAll() {
        return mDSLContext.selectFrom(${table})
#if($hasActive)
                .where(${table}.ACTIVE.isTrue())
#end
                .orderBy(${table}.ID.asc())
                .fetchInto(${pojoCls}.class);
    }

    @Override
    public ${pojoCls} insert(${pojoCls} ${pojoName}) {
        ${recordCls} record = mDSLContext.newRecord(${table}, ${pojoName});
        record.insert();
        return record.into(${pojoCls}.class);
    }

    @Override
    public int updateById(Long id, ${recordCls} ${pojoName}) {
        return mDSLContext.executeUpdate(${pojoName}, ${table}.ID.eq(id));
    }

    @Override
    public int deleteByIds(List<Long> ids) {
#if($hasActive)
        return mDSLContext.update(${table})
                .set(${table}.ACTIVE, false)
                .where(${table}.ID.in(ids))
                .execute();
#else
        return mDSLContext.deleteFrom(${table})
                .where(${table}.ID.in(ids))
                .execute();
#end
    }

    @Override
    public boolean existsById(Long id) {
        return mDSLContext.fetchExists(${table}, ${table}.ID.eq(id)#if($hasActive)

                .and(${table}.ACTIVE.isTrue())#end);
    }
}
